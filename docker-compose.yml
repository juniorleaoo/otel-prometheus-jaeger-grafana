services:
  api-11:
    build:
      context: ./
      dockerfile: app/user-11/Dockerfile
    hostname: api
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/app
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=123456
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_JAVAAGENT_LOGGING=simple

  db:
    image: postgres:16.2-alpine
    hostname: db
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=123456
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U admin -d app'" ]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 5s

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning:/etc/grafana/provisioning

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  otel-collector:
    image: otel/opentelemetry-collector-contrib-dev:latest
    container_name: otel-collector
    command: ["--config=/opentelemetry/otel-collector-config.yml"]
    volumes:
      - ./opentelemetry/otel-collector-config.yml:/opentelemetry/otel-collector-config.yml
    ports:
      - "1888:1888"
      - "8888:8888"
      - "8889:8889"
      - "13133:13133"
      - "4317:4317"
      - "4318:4318"
      - "55679:55679"
    depends_on:
      - jaeger
      - prometheus

networks:
  default:
    name: app-network
    driver: bridge